# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from wallet.models.pick_vs_campaign_update_params_exclude_keyof_vs_campaign_update_params_start_date_or_expiration_date_value_type import PickVSCampaignUpdateParamsExcludeKeyofVSCampaignUpdateParamsStartDateOrExpirationDateValueType
from wallet.models.wt_wallet_page_view_id import WTWalletPageViewId
from typing import Optional, Set
from typing_extensions import Self

class StaticVoucherCampaign(BaseModel):
    """
    StaticVoucherCampaign
    """ # noqa: E501
    id: WTWalletPageViewId
    title: Annotated[str, Field(min_length=1, strict=True)]
    notes: StrictStr
    value_type: PickVSCampaignUpdateParamsExcludeKeyofVSCampaignUpdateParamsStartDateOrExpirationDateValueType = Field(alias="valueType")
    is_loaded: StrictBool = Field(alias="isLoaded")
    display_value: Optional[StrictStr] = Field(default=None, alias="displayValue")
    merchants_reference_id: Optional[StrictStr] = Field(default=None, alias="merchantsReferenceID")
    valid_only_at_pos_register_ids: Optional[List[StrictStr]] = Field(default=None, alias="validOnlyAtPOSRegisterIDs")
    payment_design_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="paymentDesignID")
    employee_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="employeeID")
    reinvestment_sum: Annotated[int, Field(strict=True, ge=0)] = Field(alias="reinvestmentSum")
    number_of_vouchers_in_file: Annotated[int, Field(strict=True, ge=0)] = Field(alias="numberOfVouchersInFile")
    campaign_group_id: Optional[Annotated[str, Field(min_length=10, strict=True, max_length=10)]] = Field(default=None, alias="campaignGroupID")
    bucket: Optional[StrictStr] = None
    created_by_source_id: StrictInt = Field(alias="createdBySourceID")
    original_file_name: Optional[StrictStr] = Field(default=None, alias="originalFileName")
    merchant_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="merchantID")
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    is_active: StrictBool = Field(alias="isActive")
    voucher_type: Union[StrictFloat, StrictInt] = Field(alias="voucherType")
    reinvestment_sum_decimal: StrictStr = Field(alias="reinvestmentSum_decimal")
    reinvestment_sum_string: StrictStr = Field(alias="reinvestmentSum_string")
    start_date: datetime = Field(alias="startDate")
    expiration_date: datetime = Field(alias="expirationDate")
    __properties: ClassVar[List[str]] = ["id", "title", "notes", "valueType", "isLoaded", "displayValue", "merchantsReferenceID", "validOnlyAtPOSRegisterIDs", "paymentDesignID", "employeeID", "reinvestmentSum", "numberOfVouchersInFile", "campaignGroupID", "bucket", "createdBySourceID", "originalFileName", "merchantID", "createdAt", "updatedAt", "isActive", "voucherType", "reinvestmentSum_decimal", "reinvestmentSum_string", "startDate", "expirationDate"]

    @field_validator('payment_design_id')
    def payment_design_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    @field_validator('employee_id')
    def employee_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    @field_validator('campaign_group_id')
    def campaign_group_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    @field_validator('merchant_id')
    def merchant_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StaticVoucherCampaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value_type
        if self.value_type:
            _dict['valueType'] = self.value_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StaticVoucherCampaign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": WTWalletPageViewId.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "title": obj.get("title"),
            "notes": obj.get("notes"),
            "valueType": PickVSCampaignUpdateParamsExcludeKeyofVSCampaignUpdateParamsStartDateOrExpirationDateValueType.from_dict(obj["valueType"]) if obj.get("valueType") is not None else None,
            "isLoaded": obj.get("isLoaded"),
            "displayValue": obj.get("displayValue"),
            "merchantsReferenceID": obj.get("merchantsReferenceID"),
            "validOnlyAtPOSRegisterIDs": obj.get("validOnlyAtPOSRegisterIDs"),
            "paymentDesignID": obj.get("paymentDesignID"),
            "employeeID": obj.get("employeeID"),
            "reinvestmentSum": obj.get("reinvestmentSum"),
            "numberOfVouchersInFile": obj.get("numberOfVouchersInFile"),
            "campaignGroupID": obj.get("campaignGroupID"),
            "bucket": obj.get("bucket"),
            "createdBySourceID": obj.get("createdBySourceID"),
            "originalFileName": obj.get("originalFileName"),
            "merchantID": obj.get("merchantID"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "isActive": obj.get("isActive"),
            "voucherType": obj.get("voucherType"),
            "reinvestmentSum_decimal": obj.get("reinvestmentSum_decimal"),
            "reinvestmentSum_string": obj.get("reinvestmentSum_string"),
            "startDate": obj.get("startDate"),
            "expirationDate": obj.get("expirationDate")
        })
        return _obj


