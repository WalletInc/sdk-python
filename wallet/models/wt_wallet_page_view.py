# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from wallet.models.wt_wallet_page_view_geo_point import WTWalletPageViewGeoPoint
from wallet.models.wt_wallet_page_view_id import WTWalletPageViewId
from typing import Optional, Set
from typing_extensions import Self

class WTWalletPageView(BaseModel):
    """
    WTWalletPageView
    """ # noqa: E501
    ip: StrictStr
    wallet_object_id: StrictStr = Field(alias="walletObjectID")
    wallet_object_prefix: StrictStr = Field(alias="walletObjectPrefix")
    parent_object_id: StrictStr = Field(alias="parentObjectID")
    parent_object_prefix: StrictStr = Field(alias="parentObjectPrefix")
    session_id: StrictStr = Field(alias="sessionID")
    navigator_agent: StrictStr = Field(alias="navigatorAgent")
    browser_name: StrictStr = Field(alias="browserName")
    browser_version: StrictStr = Field(alias="browserVersion")
    engine_name: StrictStr = Field(alias="engineName")
    engine_version: StrictStr = Field(alias="engineVersion")
    o_s_name: StrictStr = Field(alias="oSName")
    o_s_version: StrictStr = Field(alias="oSVersion")
    is_mobile: StrictBool = Field(alias="isMobile")
    device_vendor: StrictStr = Field(alias="deviceVendor")
    device_model: StrictStr = Field(alias="deviceModel")
    device_type: StrictStr = Field(alias="deviceType")
    phone_verification_token: StrictStr = Field(alias="phoneVerificationToken")
    referring_domain: Optional[StrictStr] = Field(default=None, alias="referringDomain")
    referrer: Optional[StrictStr] = None
    id: WTWalletPageViewId
    status: StrictStr
    country: StrictStr
    country_code: StrictStr = Field(alias="countryCode")
    region: StrictStr
    region_name: StrictStr = Field(alias="regionName")
    city: StrictStr
    zip: StrictStr
    latitude: Union[StrictFloat, StrictInt]
    longitude: Union[StrictFloat, StrictInt]
    timezone: StrictStr
    isp: StrictStr
    org: StrictStr
    asn: StrictStr
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    merchant_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="merchantID")
    is_active: StrictBool = Field(description="Denotes if this resource is active", alias="isActive")
    geo_point: WTWalletPageViewGeoPoint = Field(alias="geoPoint")
    __properties: ClassVar[List[str]] = ["ip", "walletObjectID", "walletObjectPrefix", "parentObjectID", "parentObjectPrefix", "sessionID", "navigatorAgent", "browserName", "browserVersion", "engineName", "engineVersion", "oSName", "oSVersion", "isMobile", "deviceVendor", "deviceModel", "deviceType", "phoneVerificationToken", "referringDomain", "referrer", "id", "status", "country", "countryCode", "region", "regionName", "city", "zip", "latitude", "longitude", "timezone", "isp", "org", "asn", "createdAt", "updatedAt", "merchantID", "isActive", "geoPoint"]

    @field_validator('merchant_id')
    def merchant_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WTWalletPageView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo_point
        if self.geo_point:
            _dict['geoPoint'] = self.geo_point.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WTWalletPageView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ip": obj.get("ip"),
            "walletObjectID": obj.get("walletObjectID"),
            "walletObjectPrefix": obj.get("walletObjectPrefix"),
            "parentObjectID": obj.get("parentObjectID"),
            "parentObjectPrefix": obj.get("parentObjectPrefix"),
            "sessionID": obj.get("sessionID"),
            "navigatorAgent": obj.get("navigatorAgent"),
            "browserName": obj.get("browserName"),
            "browserVersion": obj.get("browserVersion"),
            "engineName": obj.get("engineName"),
            "engineVersion": obj.get("engineVersion"),
            "oSName": obj.get("oSName"),
            "oSVersion": obj.get("oSVersion"),
            "isMobile": obj.get("isMobile"),
            "deviceVendor": obj.get("deviceVendor"),
            "deviceModel": obj.get("deviceModel"),
            "deviceType": obj.get("deviceType"),
            "phoneVerificationToken": obj.get("phoneVerificationToken"),
            "referringDomain": obj.get("referringDomain"),
            "referrer": obj.get("referrer"),
            "id": WTWalletPageViewId.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "status": obj.get("status"),
            "country": obj.get("country"),
            "countryCode": obj.get("countryCode"),
            "region": obj.get("region"),
            "regionName": obj.get("regionName"),
            "city": obj.get("city"),
            "zip": obj.get("zip"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "timezone": obj.get("timezone"),
            "isp": obj.get("isp"),
            "org": obj.get("org"),
            "asn": obj.get("asn"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "merchantID": obj.get("merchantID"),
            "isActive": obj.get("isActive"),
            "geoPoint": WTWalletPageViewGeoPoint.from_dict(obj["geoPoint"]) if obj.get("geoPoint") is not None else None
        })
        return _obj


