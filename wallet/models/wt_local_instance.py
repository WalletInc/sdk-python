# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from wallet.models.phone_number_capabilities import PhoneNumberCapabilities
from typing import Optional, Set
from typing_extensions import Self

class WTLocalInstance(BaseModel):
    """
    tsoaModel
    """ # noqa: E501
    capabilities: PhoneNumberCapabilities
    beta: StrictBool
    address_requirements: StrictStr = Field(alias="addressRequirements")
    iso_country: StrictStr = Field(alias="isoCountry")
    postal_code: StrictStr = Field(alias="postalCode")
    region: StrictStr
    longitude: Union[StrictFloat, StrictInt]
    latitude: Union[StrictFloat, StrictInt]
    rate_center: StrictStr = Field(alias="rateCenter")
    locality: StrictStr
    lata: StrictStr
    phone_number: StrictStr = Field(alias="phoneNumber")
    friendly_name: StrictStr = Field(alias="friendlyName")
    __properties: ClassVar[List[str]] = ["capabilities", "beta", "addressRequirements", "isoCountry", "postalCode", "region", "longitude", "latitude", "rateCenter", "locality", "lata", "phoneNumber", "friendlyName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WTLocalInstance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of capabilities
        if self.capabilities:
            _dict['capabilities'] = self.capabilities.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WTLocalInstance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capabilities": PhoneNumberCapabilities.from_dict(obj["capabilities"]) if obj.get("capabilities") is not None else None,
            "beta": obj.get("beta"),
            "addressRequirements": obj.get("addressRequirements"),
            "isoCountry": obj.get("isoCountry"),
            "postalCode": obj.get("postalCode"),
            "region": obj.get("region"),
            "longitude": obj.get("longitude"),
            "latitude": obj.get("latitude"),
            "rateCenter": obj.get("rateCenter"),
            "locality": obj.get("locality"),
            "lata": obj.get("lata"),
            "phoneNumber": obj.get("phoneNumber"),
            "friendlyName": obj.get("friendlyName")
        })
        return _obj


