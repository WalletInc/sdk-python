# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from wallet.models.save_ticket_settings_request_payment_design_id import SaveTicketSettingsRequestPaymentDesignID
from typing import Optional, Set
from typing_extensions import Self

class Ticket(BaseModel):
    """
    Ticket
    """ # noqa: E501
    recipient_phone_number: Optional[StrictStr] = Field(default=None, alias="recipientPhoneNumber")
    recipient_email_address: Optional[StrictStr] = Field(default=None, alias="recipientEmailAddress")
    recipient_member_id: Optional[StrictStr] = Field(default=None, alias="recipientMemberID")
    is_comp: Optional[StrictBool] = Field(default=None, alias="isComp")
    quantity: Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]] = Field(default=None, description="The number of tickets allocated to the recipient.")
    performance_id: StrictStr = Field(alias="performanceID")
    id: SaveTicketSettingsRequestPaymentDesignID
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    is_active: StrictBool = Field(alias="isActive")
    merchant_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="merchantID")
    is_claimed: Optional[StrictBool] = Field(default=None, alias="isClaimed")
    date_time_claimed: Optional[datetime] = Field(default=None, alias="dateTimeClaimed")
    claimed_by_phone_number: Optional[StrictStr] = Field(default=None, alias="claimedByPhoneNumber")
    redeemed_source: Optional[StrictStr] = Field(default=None, alias="redeemedSource")
    redeemed_transaction_id: Optional[StrictStr] = Field(default=None, alias="redeemedTransactionID")
    transaction_type: Optional[StrictStr] = Field(default=None, alias="transactionType")
    register_id: Optional[StrictStr] = Field(default=None, alias="registerID")
    is_redeemed: Optional[StrictBool] = Field(default=None, alias="isRedeemed")
    date_time_redeemed: Optional[datetime] = Field(default=None, alias="dateTimeRedeemed")
    __properties: ClassVar[List[str]] = ["recipientPhoneNumber", "recipientEmailAddress", "recipientMemberID", "isComp", "quantity", "performanceID", "id", "createdAt", "updatedAt", "isActive", "merchantID", "isClaimed", "dateTimeClaimed", "claimedByPhoneNumber", "redeemedSource", "redeemedTransactionID", "transactionType", "registerID", "isRedeemed", "dateTimeRedeemed"]

    @field_validator('merchant_id')
    def merchant_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Ticket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Ticket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "recipientPhoneNumber": obj.get("recipientPhoneNumber"),
            "recipientEmailAddress": obj.get("recipientEmailAddress"),
            "recipientMemberID": obj.get("recipientMemberID"),
            "isComp": obj.get("isComp"),
            "quantity": obj.get("quantity"),
            "performanceID": obj.get("performanceID"),
            "id": SaveTicketSettingsRequestPaymentDesignID.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "isActive": obj.get("isActive"),
            "merchantID": obj.get("merchantID"),
            "isClaimed": obj.get("isClaimed"),
            "dateTimeClaimed": obj.get("dateTimeClaimed"),
            "claimedByPhoneNumber": obj.get("claimedByPhoneNumber"),
            "redeemedSource": obj.get("redeemedSource"),
            "redeemedTransactionID": obj.get("redeemedTransactionID"),
            "transactionType": obj.get("transactionType"),
            "registerID": obj.get("registerID"),
            "isRedeemed": obj.get("isRedeemed"),
            "dateTimeRedeemed": obj.get("dateTimeRedeemed")
        })
        return _obj


