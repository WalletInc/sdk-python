# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from wallet.models.employee_schedule_start_day import EmployeeScheduleStartDay
from wallet.models.employee_schedule_start_hour import EmployeeScheduleStartHour
from wallet.models.employee_schedule_start_meridiem import EmployeeScheduleStartMeridiem
from wallet.models.employee_schedule_start_minute import EmployeeScheduleStartMinute
from typing import Optional, Set
from typing_extensions import Self

class WTEmployeeCreate(BaseModel):
    """
    WTEmployeeCreate
    """ # noqa: E501
    first_name: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="firstName")
    last_name: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="lastName")
    email: Annotated[str, Field(min_length=1, strict=True)]
    phone_number: StrictStr = Field(alias="phoneNumber")
    is_public_representative: StrictBool = Field(alias="isPublicRepresentative")
    wallet_sequence_number: StrictInt = Field(alias="walletSequenceNumber")
    employee_id: Annotated[str, Field(min_length=0, strict=True)] = Field(alias="employeeID")
    job_title: Annotated[str, Field(min_length=0, strict=True)] = Field(alias="jobTitle")
    department: Annotated[str, Field(min_length=0, strict=True)]
    schedule_start_day: Optional[EmployeeScheduleStartDay] = Field(default=None, alias="scheduleStartDay")
    schedule_start_hour: Optional[EmployeeScheduleStartHour] = Field(default=None, alias="scheduleStartHour")
    schedule_start_minute: Optional[EmployeeScheduleStartMinute] = Field(default=None, alias="scheduleStartMinute")
    schedule_start_meridiem: Optional[EmployeeScheduleStartMeridiem] = Field(default=None, alias="scheduleStartMeridiem")
    schedule_end_day: Optional[EmployeeScheduleStartDay] = Field(default=None, alias="scheduleEndDay")
    schedule_end_hour: Optional[EmployeeScheduleStartHour] = Field(default=None, alias="scheduleEndHour")
    schedule_end_minute: Optional[EmployeeScheduleStartMinute] = Field(default=None, alias="scheduleEndMinute")
    schedule_end_meridiem: Optional[EmployeeScheduleStartMeridiem] = Field(default=None, alias="scheduleEndMeridiem")
    __properties: ClassVar[List[str]] = ["firstName", "lastName", "email", "phoneNumber", "isPublicRepresentative", "walletSequenceNumber", "employeeID", "jobTitle", "department", "scheduleStartDay", "scheduleStartHour", "scheduleStartMinute", "scheduleStartMeridiem", "scheduleEndDay", "scheduleEndHour", "scheduleEndMinute", "scheduleEndMeridiem"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WTEmployeeCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of schedule_start_day
        if self.schedule_start_day:
            _dict['scheduleStartDay'] = self.schedule_start_day.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_start_hour
        if self.schedule_start_hour:
            _dict['scheduleStartHour'] = self.schedule_start_hour.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_start_minute
        if self.schedule_start_minute:
            _dict['scheduleStartMinute'] = self.schedule_start_minute.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_start_meridiem
        if self.schedule_start_meridiem:
            _dict['scheduleStartMeridiem'] = self.schedule_start_meridiem.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_end_day
        if self.schedule_end_day:
            _dict['scheduleEndDay'] = self.schedule_end_day.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_end_hour
        if self.schedule_end_hour:
            _dict['scheduleEndHour'] = self.schedule_end_hour.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_end_minute
        if self.schedule_end_minute:
            _dict['scheduleEndMinute'] = self.schedule_end_minute.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_end_meridiem
        if self.schedule_end_meridiem:
            _dict['scheduleEndMeridiem'] = self.schedule_end_meridiem.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WTEmployeeCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "email": obj.get("email"),
            "phoneNumber": obj.get("phoneNumber"),
            "isPublicRepresentative": obj.get("isPublicRepresentative"),
            "walletSequenceNumber": obj.get("walletSequenceNumber"),
            "employeeID": obj.get("employeeID"),
            "jobTitle": obj.get("jobTitle"),
            "department": obj.get("department"),
            "scheduleStartDay": EmployeeScheduleStartDay.from_dict(obj["scheduleStartDay"]) if obj.get("scheduleStartDay") is not None else None,
            "scheduleStartHour": EmployeeScheduleStartHour.from_dict(obj["scheduleStartHour"]) if obj.get("scheduleStartHour") is not None else None,
            "scheduleStartMinute": EmployeeScheduleStartMinute.from_dict(obj["scheduleStartMinute"]) if obj.get("scheduleStartMinute") is not None else None,
            "scheduleStartMeridiem": EmployeeScheduleStartMeridiem.from_dict(obj["scheduleStartMeridiem"]) if obj.get("scheduleStartMeridiem") is not None else None,
            "scheduleEndDay": EmployeeScheduleStartDay.from_dict(obj["scheduleEndDay"]) if obj.get("scheduleEndDay") is not None else None,
            "scheduleEndHour": EmployeeScheduleStartHour.from_dict(obj["scheduleEndHour"]) if obj.get("scheduleEndHour") is not None else None,
            "scheduleEndMinute": EmployeeScheduleStartMinute.from_dict(obj["scheduleEndMinute"]) if obj.get("scheduleEndMinute") is not None else None,
            "scheduleEndMeridiem": EmployeeScheduleStartMeridiem.from_dict(obj["scheduleEndMeridiem"]) if obj.get("scheduleEndMeridiem") is not None else None
        })
        return _obj


