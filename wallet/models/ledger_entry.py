# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from wallet.models.applicable_terminals import ApplicableTerminals
from wallet.models.ledger_entry_parent_object_id import LedgerEntryParentObjectID
from wallet.models.ledger_entry_transaction_type import LedgerEntryTransactionType
from wallet.models.wt_wallet_page_view_id import WTWalletPageViewId
from typing import Optional, Set
from typing_extensions import Self

class LedgerEntry(BaseModel):
    """
    LedgerEntry
    """ # noqa: E501
    register_id: StrictStr = Field(alias="registerID")
    register_type: ApplicableTerminals = Field(alias="registerType")
    transaction_id: StrictStr = Field(alias="transactionID")
    transaction_type: LedgerEntryTransactionType = Field(alias="transactionType")
    check_amount: Union[StrictFloat, StrictInt] = Field(alias="checkAmount")
    transaction_amount: Union[StrictFloat, StrictInt] = Field(alias="transactionAmount")
    check_balance: Union[StrictFloat, StrictInt] = Field(alias="checkBalance")
    discount_received: StrictStr = Field(alias="discountReceived")
    payment_object_prefix: StrictStr = Field(alias="paymentObjectPrefix")
    payment_object_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="paymentObjectID")
    parent_object_prefix: StrictStr = Field(alias="parentObjectPrefix")
    parent_object_id: LedgerEntryParentObjectID = Field(alias="parentObjectID")
    meta_value: StrictStr = Field(alias="metaValue")
    id: WTWalletPageViewId
    merchant_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="merchantID")
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    is_active: StrictBool = Field(alias="isActive")
    refunded_ledger_entry_id: Optional[Annotated[str, Field(min_length=10, strict=True, max_length=10)]] = Field(default=None, alias="refundedLedgerEntryID")
    transaction_amount_decimal: StrictStr = Field(alias="transactionAmount_decimal")
    transaction_amount_string: StrictStr = Field(alias="transactionAmount_string")
    check_amount_decimal: StrictStr = Field(alias="checkAmount_decimal")
    check_amount_string: StrictStr = Field(alias="checkAmount_string")
    check_balance_decimal: StrictStr = Field(alias="checkBalance_decimal")
    check_balance_string: StrictStr = Field(alias="checkBalance_string")
    __properties: ClassVar[List[str]] = ["registerID", "registerType", "transactionID", "transactionType", "checkAmount", "transactionAmount", "checkBalance", "discountReceived", "paymentObjectPrefix", "paymentObjectID", "parentObjectPrefix", "parentObjectID", "metaValue", "id", "merchantID", "createdAt", "updatedAt", "isActive", "refundedLedgerEntryID", "transactionAmount_decimal", "transactionAmount_string", "checkAmount_decimal", "checkAmount_string", "checkBalance_decimal", "checkBalance_string"]

    @field_validator('payment_object_id')
    def payment_object_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    @field_validator('merchant_id')
    def merchant_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    @field_validator('refunded_ledger_entry_id')
    def refunded_ledger_entry_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LedgerEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of register_type
        if self.register_type:
            _dict['registerType'] = self.register_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction_type
        if self.transaction_type:
            _dict['transactionType'] = self.transaction_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_object_id
        if self.parent_object_id:
            _dict['parentObjectID'] = self.parent_object_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LedgerEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "registerID": obj.get("registerID"),
            "registerType": ApplicableTerminals.from_dict(obj["registerType"]) if obj.get("registerType") is not None else None,
            "transactionID": obj.get("transactionID"),
            "transactionType": LedgerEntryTransactionType.from_dict(obj["transactionType"]) if obj.get("transactionType") is not None else None,
            "checkAmount": obj.get("checkAmount"),
            "transactionAmount": obj.get("transactionAmount"),
            "checkBalance": obj.get("checkBalance"),
            "discountReceived": obj.get("discountReceived"),
            "paymentObjectPrefix": obj.get("paymentObjectPrefix"),
            "paymentObjectID": obj.get("paymentObjectID"),
            "parentObjectPrefix": obj.get("parentObjectPrefix"),
            "parentObjectID": LedgerEntryParentObjectID.from_dict(obj["parentObjectID"]) if obj.get("parentObjectID") is not None else None,
            "metaValue": obj.get("metaValue"),
            "id": WTWalletPageViewId.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "merchantID": obj.get("merchantID"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "isActive": obj.get("isActive"),
            "refundedLedgerEntryID": obj.get("refundedLedgerEntryID"),
            "transactionAmount_decimal": obj.get("transactionAmount_decimal"),
            "transactionAmount_string": obj.get("transactionAmount_string"),
            "checkAmount_decimal": obj.get("checkAmount_decimal"),
            "checkAmount_string": obj.get("checkAmount_string"),
            "checkBalance_decimal": obj.get("checkBalance_decimal"),
            "checkBalance_string": obj.get("checkBalance_string")
        })
        return _obj


