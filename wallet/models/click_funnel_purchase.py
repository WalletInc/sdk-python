# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from wallet.models.click_funnel_contact import ClickFunnelContact
from wallet.models.click_funnel_original_amount import ClickFunnelOriginalAmount
from wallet.models.click_funnel_product import ClickFunnelProduct
from typing import Optional, Set
from typing_extensions import Self

class ClickFunnelPurchase(BaseModel):
    """
    ClickFunnelPurchase
    """ # noqa: E501
    id: Union[StrictFloat, StrictInt]
    products: List[ClickFunnelProduct]
    member_id: Optional[Any] = None
    contact: ClickFunnelContact
    funnel_id: Union[StrictFloat, StrictInt]
    stripe_customer_token: StrictStr
    created_at: datetime
    updated_at: datetime
    subscription_id: Optional[Any] = None
    charge_id: Optional[Any] = None
    ctransreceipt: Optional[Any] = None
    status: StrictStr
    fulfillment_status: Optional[Any] = None
    fulfillment_id: Optional[Any] = None
    fulfillments: Dict[str, Any]
    payments_count: Optional[Any] = None
    infusionsoft_ccid: Optional[Any] = None
    oap_customer_id: Optional[Any] = None
    payment_instrument_type: Optional[Any] = None
    original_amount_cents: Union[StrictFloat, StrictInt]
    original_amount: ClickFunnelOriginalAmount
    original_amount_currency: StrictStr
    manual: StrictBool
    error_message: Optional[Any] = None
    nmi_customer_vault_id: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["id", "products", "member_id", "contact", "funnel_id", "stripe_customer_token", "created_at", "updated_at", "subscription_id", "charge_id", "ctransreceipt", "status", "fulfillment_status", "fulfillment_id", "fulfillments", "payments_count", "infusionsoft_ccid", "oap_customer_id", "payment_instrument_type", "original_amount_cents", "original_amount", "original_amount_currency", "manual", "error_message", "nmi_customer_vault_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClickFunnelPurchase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item in self.products:
                if _item:
                    _items.append(_item.to_dict())
            _dict['products'] = _items
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of original_amount
        if self.original_amount:
            _dict['original_amount'] = self.original_amount.to_dict()
        # set to None if member_id (nullable) is None
        # and model_fields_set contains the field
        if self.member_id is None and "member_id" in self.model_fields_set:
            _dict['member_id'] = None

        # set to None if subscription_id (nullable) is None
        # and model_fields_set contains the field
        if self.subscription_id is None and "subscription_id" in self.model_fields_set:
            _dict['subscription_id'] = None

        # set to None if charge_id (nullable) is None
        # and model_fields_set contains the field
        if self.charge_id is None and "charge_id" in self.model_fields_set:
            _dict['charge_id'] = None

        # set to None if ctransreceipt (nullable) is None
        # and model_fields_set contains the field
        if self.ctransreceipt is None and "ctransreceipt" in self.model_fields_set:
            _dict['ctransreceipt'] = None

        # set to None if fulfillment_status (nullable) is None
        # and model_fields_set contains the field
        if self.fulfillment_status is None and "fulfillment_status" in self.model_fields_set:
            _dict['fulfillment_status'] = None

        # set to None if fulfillment_id (nullable) is None
        # and model_fields_set contains the field
        if self.fulfillment_id is None and "fulfillment_id" in self.model_fields_set:
            _dict['fulfillment_id'] = None

        # set to None if payments_count (nullable) is None
        # and model_fields_set contains the field
        if self.payments_count is None and "payments_count" in self.model_fields_set:
            _dict['payments_count'] = None

        # set to None if infusionsoft_ccid (nullable) is None
        # and model_fields_set contains the field
        if self.infusionsoft_ccid is None and "infusionsoft_ccid" in self.model_fields_set:
            _dict['infusionsoft_ccid'] = None

        # set to None if oap_customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.oap_customer_id is None and "oap_customer_id" in self.model_fields_set:
            _dict['oap_customer_id'] = None

        # set to None if payment_instrument_type (nullable) is None
        # and model_fields_set contains the field
        if self.payment_instrument_type is None and "payment_instrument_type" in self.model_fields_set:
            _dict['payment_instrument_type'] = None

        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['error_message'] = None

        # set to None if nmi_customer_vault_id (nullable) is None
        # and model_fields_set contains the field
        if self.nmi_customer_vault_id is None and "nmi_customer_vault_id" in self.model_fields_set:
            _dict['nmi_customer_vault_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClickFunnelPurchase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "products": [ClickFunnelProduct.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None,
            "member_id": obj.get("member_id"),
            "contact": ClickFunnelContact.from_dict(obj["contact"]) if obj.get("contact") is not None else None,
            "funnel_id": obj.get("funnel_id"),
            "stripe_customer_token": obj.get("stripe_customer_token"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "subscription_id": obj.get("subscription_id"),
            "charge_id": obj.get("charge_id"),
            "ctransreceipt": obj.get("ctransreceipt"),
            "status": obj.get("status"),
            "fulfillment_status": obj.get("fulfillment_status"),
            "fulfillment_id": obj.get("fulfillment_id"),
            "fulfillments": obj.get("fulfillments"),
            "payments_count": obj.get("payments_count"),
            "infusionsoft_ccid": obj.get("infusionsoft_ccid"),
            "oap_customer_id": obj.get("oap_customer_id"),
            "payment_instrument_type": obj.get("payment_instrument_type"),
            "original_amount_cents": obj.get("original_amount_cents"),
            "original_amount": ClickFunnelOriginalAmount.from_dict(obj["original_amount"]) if obj.get("original_amount") is not None else None,
            "original_amount_currency": obj.get("original_amount_currency"),
            "manual": obj.get("manual"),
            "error_message": obj.get("error_message"),
            "nmi_customer_vault_id": obj.get("nmi_customer_vault_id")
        })
        return _obj


