# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WTAuthenticationRegister(BaseModel):
    """
    WTAuthenticationRegister
    """ # noqa: E501
    first_name: StrictStr = Field(alias="firstName")
    last_name: StrictStr = Field(alias="lastName")
    email: StrictStr
    password: StrictStr
    hear_about_us: Optional[StrictStr] = Field(default=None, alias="hearAboutUs")
    hear_about_us_details: Optional[StrictStr] = Field(default=None, alias="hearAboutUsDetails")
    company_name: StrictStr = Field(alias="companyName")
    merchant_type: StrictStr = Field(alias="merchantType")
    street_address1: StrictStr = Field(alias="streetAddress1")
    street_address2: StrictStr = Field(alias="streetAddress2")
    city: StrictStr
    state: StrictStr
    zip: StrictStr
    country: StrictStr
    phone_number: StrictStr = Field(alias="phoneNumber")
    ein: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["firstName", "lastName", "email", "password", "hearAboutUs", "hearAboutUsDetails", "companyName", "merchantType", "streetAddress1", "streetAddress2", "city", "state", "zip", "country", "phoneNumber", "ein"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WTAuthenticationRegister from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WTAuthenticationRegister from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "email": obj.get("email"),
            "password": obj.get("password"),
            "hearAboutUs": obj.get("hearAboutUs"),
            "hearAboutUsDetails": obj.get("hearAboutUsDetails"),
            "companyName": obj.get("companyName"),
            "merchantType": obj.get("merchantType"),
            "streetAddress1": obj.get("streetAddress1"),
            "streetAddress2": obj.get("streetAddress2"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "zip": obj.get("zip"),
            "country": obj.get("country"),
            "phoneNumber": obj.get("phoneNumber"),
            "ein": obj.get("ein")
        })
        return _obj


