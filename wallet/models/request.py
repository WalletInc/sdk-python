# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Request(BaseModel):
    """
    Request
    """ # noqa: E501
    id: Annotated[str, Field(min_length=10, strict=True, max_length=10)]
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    auth_amount: Union[StrictFloat, StrictInt] = Field(alias="authAmount")
    server_emp_id: StrictStr = Field(alias="serverEmpID")
    module_invoked: Optional[Any] = Field(alias="moduleInvoked")
    cashier_emp_id: StrictStr = Field(alias="cashierEmpID")
    routing_id: StrictStr = Field(alias="routingID")
    auth_account_num: Union[StrictFloat, StrictInt] = Field(alias="authAccountNum")
    more_records_count: Union[StrictFloat, StrictInt] = Field(alias="moreRecordsCount")
    payment_method_id: StrictStr = Field(alias="paymentMethodID")
    tag_data: Optional[Any] = Field(alias="tagData")
    total_auth_amount: Union[StrictFloat, StrictInt] = Field(alias="totalAuthAmount")
    refund_flag: Optional[Any] = Field(alias="refundFlag")
    close_time: datetime = Field(alias="closeTime")
    client_id: StrictStr = Field(alias="clientID")
    change_amount: Union[StrictFloat, StrictInt] = Field(alias="changeAmount")
    employee_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="employeeID")
    training_mode_flag: Optional[Any] = Field(alias="trainingModeFlag")
    source_property_id: StrictStr = Field(alias="sourcePropertyID")
    associated_check_number: StrictStr = Field(alias="associatedCheckNumber")
    post_to_property_id: StrictStr = Field(alias="postToPropertyID")
    unique_posting_id: StrictStr = Field(alias="uniquePostingID")
    expire_date: datetime = Field(alias="expireDate")
    by_name_flag: Optional[Any] = Field(alias="byNameFlag")
    payment_slip_id: StrictStr = Field(alias="paymentSlipID")
    financial_bin_detail: Optional[Any] = Field(alias="financialBinDetail")
    cvv2: StrictStr
    employee_grat_tip: Union[StrictFloat, StrictInt] = Field(alias="employeeGratTip")
    card_swipe_track1: Optional[Any] = Field(alias="cardSwipeTrack1")
    card_swipe_track2: Optional[Any] = Field(alias="cardSwipeTrack2")
    check_number: StrictStr = Field(alias="checkNumber")
    more_records_key: Optional[Any] = Field(alias="moreRecordsKey")
    tip_amount: Union[StrictFloat, StrictInt] = Field(alias="tipAmount")
    input_data: Optional[Any] = Field(alias="inputData")
    profit_center_id: StrictStr = Field(alias="profitCenterID")
    invoice_number: StrictStr = Field(alias="invoiceNumber")
    receipt_text_image: Optional[Any] = Field(alias="receiptTextImage")
    brokerage_amount: Union[StrictFloat, StrictInt] = Field(alias="brokerageAmount")
    amount: Union[StrictFloat, StrictInt]
    cover_count: Union[StrictFloat, StrictInt] = Field(alias="coverCount")
    more_records_flag: Optional[Any] = Field(alias="moreRecordsFlag")
    account_num: StrictStr = Field(alias="accountNum")
    max_record_count: Union[StrictFloat, StrictInt] = Field(alias="maxRecordCount")
    incremental_auth_amount: Union[StrictFloat, StrictInt] = Field(alias="incrementalAuthAmount")
    extra_data: Optional[Any] = Field(alias="extraData")
    check_type_id: StrictStr = Field(alias="checkTypeID")
    posting_id: StrictStr = Field(alias="postingID")
    destination_property_id: StrictStr = Field(alias="destinationPropertyID")
    account_detail: Optional[Any] = Field(alias="accountDetail")
    payment_amount: Union[StrictFloat, StrictInt] = Field(alias="paymentAmount")
    register_id: StrictStr = Field(alias="registerID")
    tndr_account_object: Optional[Any] = Field(alias="tndrAccountObject")
    meal_period_id: StrictStr = Field(alias="mealPeriodID")
    __properties: ClassVar[List[str]] = ["id", "createdAt", "updatedAt", "authAmount", "serverEmpID", "moduleInvoked", "cashierEmpID", "routingID", "authAccountNum", "moreRecordsCount", "paymentMethodID", "tagData", "totalAuthAmount", "refundFlag", "closeTime", "clientID", "changeAmount", "employeeID", "trainingModeFlag", "sourcePropertyID", "associatedCheckNumber", "postToPropertyID", "uniquePostingID", "expireDate", "byNameFlag", "paymentSlipID", "financialBinDetail", "cvv2", "employeeGratTip", "cardSwipeTrack1", "cardSwipeTrack2", "checkNumber", "moreRecordsKey", "tipAmount", "inputData", "profitCenterID", "invoiceNumber", "receiptTextImage", "brokerageAmount", "amount", "coverCount", "moreRecordsFlag", "accountNum", "maxRecordCount", "incrementalAuthAmount", "extraData", "checkTypeID", "postingID", "destinationPropertyID", "accountDetail", "paymentAmount", "registerID", "tndrAccountObject", "mealPeriodID"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    @field_validator('employee_id')
    def employee_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if module_invoked (nullable) is None
        # and model_fields_set contains the field
        if self.module_invoked is None and "module_invoked" in self.model_fields_set:
            _dict['moduleInvoked'] = None

        # set to None if tag_data (nullable) is None
        # and model_fields_set contains the field
        if self.tag_data is None and "tag_data" in self.model_fields_set:
            _dict['tagData'] = None

        # set to None if refund_flag (nullable) is None
        # and model_fields_set contains the field
        if self.refund_flag is None and "refund_flag" in self.model_fields_set:
            _dict['refundFlag'] = None

        # set to None if training_mode_flag (nullable) is None
        # and model_fields_set contains the field
        if self.training_mode_flag is None and "training_mode_flag" in self.model_fields_set:
            _dict['trainingModeFlag'] = None

        # set to None if by_name_flag (nullable) is None
        # and model_fields_set contains the field
        if self.by_name_flag is None and "by_name_flag" in self.model_fields_set:
            _dict['byNameFlag'] = None

        # set to None if financial_bin_detail (nullable) is None
        # and model_fields_set contains the field
        if self.financial_bin_detail is None and "financial_bin_detail" in self.model_fields_set:
            _dict['financialBinDetail'] = None

        # set to None if card_swipe_track1 (nullable) is None
        # and model_fields_set contains the field
        if self.card_swipe_track1 is None and "card_swipe_track1" in self.model_fields_set:
            _dict['cardSwipeTrack1'] = None

        # set to None if card_swipe_track2 (nullable) is None
        # and model_fields_set contains the field
        if self.card_swipe_track2 is None and "card_swipe_track2" in self.model_fields_set:
            _dict['cardSwipeTrack2'] = None

        # set to None if more_records_key (nullable) is None
        # and model_fields_set contains the field
        if self.more_records_key is None and "more_records_key" in self.model_fields_set:
            _dict['moreRecordsKey'] = None

        # set to None if input_data (nullable) is None
        # and model_fields_set contains the field
        if self.input_data is None and "input_data" in self.model_fields_set:
            _dict['inputData'] = None

        # set to None if receipt_text_image (nullable) is None
        # and model_fields_set contains the field
        if self.receipt_text_image is None and "receipt_text_image" in self.model_fields_set:
            _dict['receiptTextImage'] = None

        # set to None if more_records_flag (nullable) is None
        # and model_fields_set contains the field
        if self.more_records_flag is None and "more_records_flag" in self.model_fields_set:
            _dict['moreRecordsFlag'] = None

        # set to None if extra_data (nullable) is None
        # and model_fields_set contains the field
        if self.extra_data is None and "extra_data" in self.model_fields_set:
            _dict['extraData'] = None

        # set to None if account_detail (nullable) is None
        # and model_fields_set contains the field
        if self.account_detail is None and "account_detail" in self.model_fields_set:
            _dict['accountDetail'] = None

        # set to None if tndr_account_object (nullable) is None
        # and model_fields_set contains the field
        if self.tndr_account_object is None and "tndr_account_object" in self.model_fields_set:
            _dict['tndrAccountObject'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "authAmount": obj.get("authAmount"),
            "serverEmpID": obj.get("serverEmpID"),
            "moduleInvoked": obj.get("moduleInvoked"),
            "cashierEmpID": obj.get("cashierEmpID"),
            "routingID": obj.get("routingID"),
            "authAccountNum": obj.get("authAccountNum"),
            "moreRecordsCount": obj.get("moreRecordsCount"),
            "paymentMethodID": obj.get("paymentMethodID"),
            "tagData": obj.get("tagData"),
            "totalAuthAmount": obj.get("totalAuthAmount"),
            "refundFlag": obj.get("refundFlag"),
            "closeTime": obj.get("closeTime"),
            "clientID": obj.get("clientID"),
            "changeAmount": obj.get("changeAmount"),
            "employeeID": obj.get("employeeID"),
            "trainingModeFlag": obj.get("trainingModeFlag"),
            "sourcePropertyID": obj.get("sourcePropertyID"),
            "associatedCheckNumber": obj.get("associatedCheckNumber"),
            "postToPropertyID": obj.get("postToPropertyID"),
            "uniquePostingID": obj.get("uniquePostingID"),
            "expireDate": obj.get("expireDate"),
            "byNameFlag": obj.get("byNameFlag"),
            "paymentSlipID": obj.get("paymentSlipID"),
            "financialBinDetail": obj.get("financialBinDetail"),
            "cvv2": obj.get("cvv2"),
            "employeeGratTip": obj.get("employeeGratTip"),
            "cardSwipeTrack1": obj.get("cardSwipeTrack1"),
            "cardSwipeTrack2": obj.get("cardSwipeTrack2"),
            "checkNumber": obj.get("checkNumber"),
            "moreRecordsKey": obj.get("moreRecordsKey"),
            "tipAmount": obj.get("tipAmount"),
            "inputData": obj.get("inputData"),
            "profitCenterID": obj.get("profitCenterID"),
            "invoiceNumber": obj.get("invoiceNumber"),
            "receiptTextImage": obj.get("receiptTextImage"),
            "brokerageAmount": obj.get("brokerageAmount"),
            "amount": obj.get("amount"),
            "coverCount": obj.get("coverCount"),
            "moreRecordsFlag": obj.get("moreRecordsFlag"),
            "accountNum": obj.get("accountNum"),
            "maxRecordCount": obj.get("maxRecordCount"),
            "incrementalAuthAmount": obj.get("incrementalAuthAmount"),
            "extraData": obj.get("extraData"),
            "checkTypeID": obj.get("checkTypeID"),
            "postingID": obj.get("postingID"),
            "destinationPropertyID": obj.get("destinationPropertyID"),
            "accountDetail": obj.get("accountDetail"),
            "paymentAmount": obj.get("paymentAmount"),
            "registerID": obj.get("registerID"),
            "tndrAccountObject": obj.get("tndrAccountObject"),
            "mealPeriodID": obj.get("mealPeriodID")
        })
        return _obj


