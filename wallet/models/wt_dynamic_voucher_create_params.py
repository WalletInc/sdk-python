# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from wallet.models.dynamic_voucher_temporal_decrease_frequency_type import DynamicVoucherTemporalDecreaseFrequencyType
from typing import Optional, Set
from typing_extensions import Self

class WTDynamicVoucherCreateParams(BaseModel):
    """
    WTDynamicVoucherCreateParams
    """ # noqa: E501
    title: Annotated[str, Field(min_length=1, strict=True)]
    notes: StrictStr
    payment_design_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="paymentDesignID")
    date_time_start: datetime = Field(alias="dateTimeStart")
    date_time_expiration: datetime = Field(alias="dateTimeExpiration")
    starting_value: Annotated[int, Field(strict=True, ge=0)] = Field(alias="startingValue")
    max_budget: Annotated[int, Field(strict=True, ge=0)] = Field(alias="maxBudget")
    decrease_amount: Annotated[int, Field(strict=True, ge=0)] = Field(alias="decreaseAmount")
    frequency: Annotated[int, Field(strict=True, ge=0)]
    frequency_type: DynamicVoucherTemporalDecreaseFrequencyType = Field(alias="frequencyType")
    decrease_by: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="decreaseBy")
    decrease_every: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="decreaseEvery")
    __properties: ClassVar[List[str]] = ["title", "notes", "paymentDesignID", "dateTimeStart", "dateTimeExpiration", "startingValue", "maxBudget", "decreaseAmount", "frequency", "frequencyType", "decreaseBy", "decreaseEvery"]

    @field_validator('payment_design_id')
    def payment_design_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WTDynamicVoucherCreateParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of frequency_type
        if self.frequency_type:
            _dict['frequencyType'] = self.frequency_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WTDynamicVoucherCreateParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "notes": obj.get("notes"),
            "paymentDesignID": obj.get("paymentDesignID"),
            "dateTimeStart": obj.get("dateTimeStart"),
            "dateTimeExpiration": obj.get("dateTimeExpiration"),
            "startingValue": obj.get("startingValue"),
            "maxBudget": obj.get("maxBudget"),
            "decreaseAmount": obj.get("decreaseAmount"),
            "frequency": obj.get("frequency"),
            "frequencyType": DynamicVoucherTemporalDecreaseFrequencyType.from_dict(obj["frequencyType"]) if obj.get("frequencyType") is not None else None,
            "decreaseBy": obj.get("decreaseBy"),
            "decreaseEvery": obj.get("decreaseEvery")
        })
        return _obj


