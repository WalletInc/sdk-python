# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WTAuthenticationLoginResponse(BaseModel):
    """
    WTAuthenticationLoginResponse
    """ # noqa: E501
    id: StrictStr
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    first_name: StrictStr = Field(alias="firstName")
    last_name: StrictStr = Field(alias="lastName")
    username: StrictStr
    email: StrictStr
    merchant_id: StrictStr = Field(alias="merchantID")
    employee_id: StrictStr = Field(alias="employeeID")
    profile_picture_url: StrictStr = Field(alias="profilePictureURL")
    job_title: StrictStr = Field(alias="jobTitle")
    department: StrictStr
    merchant_name: StrictStr = Field(alias="merchantName")
    merchant_currency_abbreviation: Optional[StrictStr] = Field(default=None, alias="merchantCurrencyAbbreviation")
    merchant_industry: StrictStr = Field(alias="merchantIndustry")
    custom_domain: Optional[StrictStr] = Field(default=None, alias="customDomain")
    __properties: ClassVar[List[str]] = ["id", "createdAt", "updatedAt", "firstName", "lastName", "username", "email", "merchantID", "employeeID", "profilePictureURL", "jobTitle", "department", "merchantName", "merchantCurrencyAbbreviation", "merchantIndustry", "customDomain"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WTAuthenticationLoginResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WTAuthenticationLoginResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "username": obj.get("username"),
            "email": obj.get("email"),
            "merchantID": obj.get("merchantID"),
            "employeeID": obj.get("employeeID"),
            "profilePictureURL": obj.get("profilePictureURL"),
            "jobTitle": obj.get("jobTitle"),
            "department": obj.get("department"),
            "merchantName": obj.get("merchantName"),
            "merchantCurrencyAbbreviation": obj.get("merchantCurrencyAbbreviation"),
            "merchantIndustry": obj.get("merchantIndustry"),
            "customDomain": obj.get("customDomain")
        })
        return _obj


