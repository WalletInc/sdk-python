# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ReachPerformanceStats(BaseModel):
    """
    ReachPerformanceStats
    """ # noqa: E501
    sent_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Denotes the number of SMSes sent", alias="sentCount")
    delivered_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Denotes the number of SMSes delivered", alias="deliveredCount")
    failed_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Denotes the number of SMSes that have failed to deliver", alias="failedCount")
    undelivered_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Denotes the number of SMSes that were undelivered", alias="undeliveredCount")
    viewed_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Denotes the count of SMSes viewed (by clicking on the link sent as part of the SMS)", alias="viewedCount")
    redemptions_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Denotes the count of redemptions", alias="redemptionsCount")
    value_claimed: Annotated[int, Field(strict=True, ge=0)] = Field(description="Denotes the total value claimed as discounts (in cents)", alias="valueClaimed")
    revenue_generated: Annotated[int, Field(strict=True, ge=0)] = Field(description="Denotes the total revenue generated for the business by using various payment objects (in cents)", alias="revenueGenerated")
    refunds_count: Annotated[int, Field(strict=True, ge=0)] = Field(description="Denotes the count of refunds", alias="refundsCount")
    value_refunded: Annotated[int, Field(strict=True, ge=0)] = Field(description="Denotes the total value refunded (in the form of discounts, in cents)", alias="valueRefunded")
    revenue_lost: Annotated[int, Field(strict=True, ge=0)] = Field(description="Denotes the total revenue lost for the business on account of refunds (in cents)", alias="revenueLost")
    __properties: ClassVar[List[str]] = ["sentCount", "deliveredCount", "failedCount", "undeliveredCount", "viewedCount", "redemptionsCount", "valueClaimed", "revenueGenerated", "refundsCount", "valueRefunded", "revenueLost"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReachPerformanceStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReachPerformanceStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sentCount": obj.get("sentCount"),
            "deliveredCount": obj.get("deliveredCount"),
            "failedCount": obj.get("failedCount"),
            "undeliveredCount": obj.get("undeliveredCount"),
            "viewedCount": obj.get("viewedCount"),
            "redemptionsCount": obj.get("redemptionsCount"),
            "valueClaimed": obj.get("valueClaimed"),
            "revenueGenerated": obj.get("revenueGenerated"),
            "refundsCount": obj.get("refundsCount"),
            "valueRefunded": obj.get("valueRefunded"),
            "revenueLost": obj.get("revenueLost")
        })
        return _obj


