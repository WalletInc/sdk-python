# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from wallet.models.business_classification import BusinessClassification
from wallet.models.business_industry import BusinessIndustry
from wallet.models.business_regions_of_operation import BusinessRegionsOfOperation
from wallet.models.business_registration_identifier import BusinessRegistrationIdentifier
from wallet.models.business_stock_exchanges import BusinessStockExchanges
from wallet.models.business_type import BusinessType
from wallet.models.job_position import JobPosition
from typing import Optional, Set
from typing_extensions import Self

class WTA2PApplicationUpdateParams(BaseModel):
    """
    WTA2PApplicationUpdateParams
    """ # noqa: E501
    business_name: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="businessName")
    business_type: BusinessType = Field(alias="businessType")
    business_classification: BusinessClassification = Field(alias="businessClassification")
    business_industry: BusinessIndustry = Field(alias="businessIndustry")
    tax_id_type: BusinessRegistrationIdentifier = Field(alias="taxIDType")
    tax_id: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="taxID")
    website_url: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="websiteURL")
    social_media_url: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="socialMediaURL")
    regions_of_operation: List[BusinessRegionsOfOperation] = Field(alias="regionsOfOperation")
    stock_exchange: Optional[BusinessStockExchanges] = Field(default=None, alias="stockExchange")
    stock_ticker: Optional[Annotated[str, Field(min_length=0, strict=True)]] = Field(default=None, alias="stockTicker")
    messaging_volume_high: StrictBool = Field(alias="messagingVolumeHigh")
    address1: Annotated[str, Field(min_length=1, strict=True)]
    address2: Optional[Annotated[str, Field(min_length=0, strict=True)]] = None
    city: Annotated[str, Field(min_length=3, strict=True)]
    state: Annotated[str, Field(min_length=1, strict=True)]
    postal_code: Annotated[str, Field(min_length=4, strict=True)] = Field(alias="postalCode")
    country: Annotated[str, Field(min_length=2, strict=True)]
    first_name: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="firstName")
    last_name: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="lastName")
    email: Annotated[str, Field(min_length=6, strict=True)]
    job_title: Annotated[str, Field(min_length=2, strict=True)] = Field(alias="jobTitle")
    job_position: JobPosition = Field(alias="jobPosition")
    phone_number: Annotated[str, Field(min_length=7, strict=True)] = Field(alias="phoneNumber")
    __properties: ClassVar[List[str]] = ["businessName", "businessType", "businessClassification", "businessIndustry", "taxIDType", "taxID", "websiteURL", "socialMediaURL", "regionsOfOperation", "stockExchange", "stockTicker", "messagingVolumeHigh", "address1", "address2", "city", "state", "postalCode", "country", "firstName", "lastName", "email", "jobTitle", "jobPosition", "phoneNumber"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WTA2PApplicationUpdateParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WTA2PApplicationUpdateParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "businessName": obj.get("businessName"),
            "businessType": obj.get("businessType"),
            "businessClassification": obj.get("businessClassification"),
            "businessIndustry": obj.get("businessIndustry"),
            "taxIDType": obj.get("taxIDType"),
            "taxID": obj.get("taxID"),
            "websiteURL": obj.get("websiteURL"),
            "socialMediaURL": obj.get("socialMediaURL"),
            "regionsOfOperation": obj.get("regionsOfOperation"),
            "stockExchange": obj.get("stockExchange"),
            "stockTicker": obj.get("stockTicker"),
            "messagingVolumeHigh": obj.get("messagingVolumeHigh"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "postalCode": obj.get("postalCode"),
            "country": obj.get("country"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "email": obj.get("email"),
            "jobTitle": obj.get("jobTitle"),
            "jobPosition": obj.get("jobPosition"),
            "phoneNumber": obj.get("phoneNumber")
        })
        return _obj


