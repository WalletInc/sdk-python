# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ModuleError(BaseModel):
    """
    ModuleError
    """ # noqa: E501
    name: StrictStr
    message: StrictStr
    stack: Optional[StrictStr] = None
    id: StrictStr = Field(alias="#id")
    created_at: datetime = Field(alias="#createdAt")
    updated_at: datetime = Field(alias="#updatedAt")
    module: StrictStr = Field(alias="#module")
    module_name: StrictStr = Field(alias="#moduleName")
    module_id: StrictStr = Field(alias="#moduleID")
    code: StrictStr
    method_type: StrictStr = Field(alias="#methodType")
    stack_trace: Optional[Any] = Field(alias="#stackTrace")
    exception: Optional[Any] = Field(alias="#exception")
    severity: Union[StrictFloat, StrictInt] = Field(alias="#severity")
    microservice_url: StrictStr = Field(alias="#microserviceURL")
    microservice_data: Optional[Any] = Field(alias="#microserviceData")
    microservice_method: StrictStr = Field(alias="#microserviceMethod")
    microservice_options: Optional[Any] = Field(alias="#microserviceOptions")
    microservice_response_code: StrictStr = Field(alias="#microserviceResponseCode")
    microservice_response_message: StrictStr = Field(alias="#microserviceResponseMessage")
    microservice_response_http_status: StrictStr = Field(alias="#microserviceResponseHTTPStatus")
    microservice_response_fields: Optional[Any] = Field(alias="#microserviceResponseFields")
    __properties: ClassVar[List[str]] = ["name", "message", "stack", "#id", "#createdAt", "#updatedAt", "#module", "#moduleName", "#moduleID", "code", "#methodType", "#stackTrace", "#exception", "#severity", "#microserviceURL", "#microserviceData", "#microserviceMethod", "#microserviceOptions", "#microserviceResponseCode", "#microserviceResponseMessage", "#microserviceResponseHTTPStatus", "#microserviceResponseFields"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModuleError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if stack_trace (nullable) is None
        # and model_fields_set contains the field
        if self.stack_trace is None and "stack_trace" in self.model_fields_set:
            _dict['#stackTrace'] = None

        # set to None if exception (nullable) is None
        # and model_fields_set contains the field
        if self.exception is None and "exception" in self.model_fields_set:
            _dict['#exception'] = None

        # set to None if microservice_data (nullable) is None
        # and model_fields_set contains the field
        if self.microservice_data is None and "microservice_data" in self.model_fields_set:
            _dict['#microserviceData'] = None

        # set to None if microservice_options (nullable) is None
        # and model_fields_set contains the field
        if self.microservice_options is None and "microservice_options" in self.model_fields_set:
            _dict['#microserviceOptions'] = None

        # set to None if microservice_response_fields (nullable) is None
        # and model_fields_set contains the field
        if self.microservice_response_fields is None and "microservice_response_fields" in self.model_fields_set:
            _dict['#microserviceResponseFields'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModuleError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "message": obj.get("message"),
            "stack": obj.get("stack"),
            "#id": obj.get("#id"),
            "#createdAt": obj.get("#createdAt"),
            "#updatedAt": obj.get("#updatedAt"),
            "#module": obj.get("#module"),
            "#moduleName": obj.get("#moduleName"),
            "#moduleID": obj.get("#moduleID"),
            "code": obj.get("code"),
            "#methodType": obj.get("#methodType"),
            "#stackTrace": obj.get("#stackTrace"),
            "#exception": obj.get("#exception"),
            "#severity": obj.get("#severity"),
            "#microserviceURL": obj.get("#microserviceURL"),
            "#microserviceData": obj.get("#microserviceData"),
            "#microserviceMethod": obj.get("#microserviceMethod"),
            "#microserviceOptions": obj.get("#microserviceOptions"),
            "#microserviceResponseCode": obj.get("#microserviceResponseCode"),
            "#microserviceResponseMessage": obj.get("#microserviceResponseMessage"),
            "#microserviceResponseHTTPStatus": obj.get("#microserviceResponseHTTPStatus"),
            "#microserviceResponseFields": obj.get("#microserviceResponseFields")
        })
        return _obj


