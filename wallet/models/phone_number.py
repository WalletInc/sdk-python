# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from wallet.models.wt_wallet_page_view_id import WTWalletPageViewId
from typing import Optional, Set
from typing_extensions import Self

class PhoneNumber(BaseModel):
    """
    PhoneNumber
    """ # noqa: E501
    message_footer: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="messageFooter")
    help_response: StrictStr = Field(alias="helpResponse")
    stop_response: StrictStr = Field(alias="stopResponse")
    company_name: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="companyName")
    privacy_policy_url: StrictStr = Field(alias="privacyPolicyURL")
    terms_of_service_url: StrictStr = Field(alias="termsOfServiceURL")
    help_desk_keyword: StrictStr = Field(alias="helpDeskKeyword")
    help_desk_queue_response: StrictStr = Field(alias="helpDeskQueueResponse")
    is_connected_to_watson: StrictBool = Field(alias="isConnectedToWatson")
    watson_conversation_workplace_id: StrictStr = Field(alias="watsonConversationWorkplaceID")
    watson_username: StrictStr = Field(alias="watsonUsername")
    watson_password: StrictStr = Field(alias="watsonPassword")
    mobile_number: StrictStr = Field(alias="mobileNumber")
    is_short_code: StrictBool = Field(alias="isShortCode")
    twilio_sid: StrictStr = Field(alias="twilioSID")
    twilio_account_sid: StrictStr = Field(alias="twilioAccountSID")
    id: WTWalletPageViewId
    merchant_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="merchantID")
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    is_active: StrictBool = Field(alias="isActive")
    is_approved: StrictBool = Field(alias="isApproved")
    __properties: ClassVar[List[str]] = ["messageFooter", "helpResponse", "stopResponse", "companyName", "privacyPolicyURL", "termsOfServiceURL", "helpDeskKeyword", "helpDeskQueueResponse", "isConnectedToWatson", "watsonConversationWorkplaceID", "watsonUsername", "watsonPassword", "mobileNumber", "isShortCode", "twilioSID", "twilioAccountSID", "id", "merchantID", "createdAt", "updatedAt", "isActive", "isApproved"]

    @field_validator('merchant_id')
    def merchant_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PhoneNumber from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PhoneNumber from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "messageFooter": obj.get("messageFooter"),
            "helpResponse": obj.get("helpResponse"),
            "stopResponse": obj.get("stopResponse"),
            "companyName": obj.get("companyName"),
            "privacyPolicyURL": obj.get("privacyPolicyURL"),
            "termsOfServiceURL": obj.get("termsOfServiceURL"),
            "helpDeskKeyword": obj.get("helpDeskKeyword"),
            "helpDeskQueueResponse": obj.get("helpDeskQueueResponse"),
            "isConnectedToWatson": obj.get("isConnectedToWatson"),
            "watsonConversationWorkplaceID": obj.get("watsonConversationWorkplaceID"),
            "watsonUsername": obj.get("watsonUsername"),
            "watsonPassword": obj.get("watsonPassword"),
            "mobileNumber": obj.get("mobileNumber"),
            "isShortCode": obj.get("isShortCode"),
            "twilioSID": obj.get("twilioSID"),
            "twilioAccountSID": obj.get("twilioAccountSID"),
            "id": WTWalletPageViewId.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "merchantID": obj.get("merchantID"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "isActive": obj.get("isActive"),
            "isApproved": obj.get("isApproved")
        })
        return _obj


