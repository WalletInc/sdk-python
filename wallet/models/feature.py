# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Feature(BaseModel):
    """
    Feature
    """ # noqa: E501
    sort_num: Union[StrictFloat, StrictInt] = Field(alias="sortNum")
    name: StrictStr
    max_volume: Optional[StrictStr] = Field(default=None, alias="maxVolume")
    measurement: StrictStr
    description: StrictStr
    current_volume: Optional[StrictStr] = Field(default=None, alias="currentVolume")
    is_exceeded: Optional[StrictBool] = Field(default=None, alias="isExceeded")
    is_in_use: Optional[StrictBool] = Field(default=None, alias="isInUse")
    is_enabled: Optional[StrictBool] = Field(default=None, alias="isEnabled")
    __properties: ClassVar[List[str]] = ["sortNum", "name", "maxVolume", "measurement", "description", "currentVolume", "isExceeded", "isInUse", "isEnabled"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Feature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Feature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sortNum": obj.get("sortNum"),
            "name": obj.get("name"),
            "maxVolume": obj.get("maxVolume"),
            "measurement": obj.get("measurement"),
            "description": obj.get("description"),
            "currentVolume": obj.get("currentVolume"),
            "isExceeded": obj.get("isExceeded"),
            "isInUse": obj.get("isInUse"),
            "isEnabled": obj.get("isEnabled")
        })
        return _obj


