# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from wallet.models.pick_wt_payment_object_broadcast_exclude_keyof_wt_payment_object_broadcast_list_type_or_list_id_broadcast_status import PickWTPaymentObjectBroadcastExcludeKeyofWTPaymentObjectBroadcastListTypeOrListIDBroadcastStatus
from wallet.models.pick_wt_payment_object_broadcast_exclude_keyof_wt_payment_object_broadcast_list_type_or_list_id_payment_object_prefix import PickWTPaymentObjectBroadcastExcludeKeyofWTPaymentObjectBroadcastListTypeOrListIDPaymentObjectPrefix
from wallet.models.wt_imported_list import WTImportedList
from wallet.models.wt_opt_in_list import WTOptInList
from wallet.models.wt_wallet_page_view_id import WTWalletPageViewId
from typing import Optional, Set
from typing_extensions import Self

class PickWTPaymentObjectBroadcastExcludeKeyofWTPaymentObjectBroadcastListTypeOrListID(BaseModel):
    """
    From T, pick a set of properties whose keys are in the union K
    """ # noqa: E501
    id: WTWalletPageViewId
    employee_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="employeeID")
    merchant_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="merchantID")
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    is_active: StrictBool = Field(alias="isActive")
    phone_number_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="phoneNumberID")
    media_urls: List[StrictStr] = Field(alias="mediaURLs")
    opt_in_list: Optional[WTOptInList] = Field(default=None, alias="OptInList")
    imported_list: Optional[WTImportedList] = Field(default=None, alias="ImportedList")
    broadcast_status: PickWTPaymentObjectBroadcastExcludeKeyofWTPaymentObjectBroadcastListTypeOrListIDBroadcastStatus = Field(alias="broadcastStatus")
    broadcast_queued_at: Optional[datetime] = Field(alias="broadcastQueuedAt")
    broadcast_started_at: Optional[datetime] = Field(alias="broadcastStartedAt")
    broadcast_completed_at: Optional[datetime] = Field(alias="broadcastCompletedAt")
    payment_object_prefix: PickWTPaymentObjectBroadcastExcludeKeyofWTPaymentObjectBroadcastListTypeOrListIDPaymentObjectPrefix = Field(alias="paymentObjectPrefix")
    payment_object_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="paymentObjectID")
    message_template: StrictStr = Field(alias="messageTemplate")
    broadcast_scheduled_at: datetime = Field(alias="broadcastScheduledAt")
    __properties: ClassVar[List[str]] = ["id", "employeeID", "merchantID", "createdAt", "updatedAt", "isActive", "phoneNumberID", "mediaURLs", "OptInList", "ImportedList", "broadcastStatus", "broadcastQueuedAt", "broadcastStartedAt", "broadcastCompletedAt", "paymentObjectPrefix", "paymentObjectID", "messageTemplate", "broadcastScheduledAt"]

    @field_validator('employee_id')
    def employee_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    @field_validator('merchant_id')
    def merchant_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    @field_validator('phone_number_id')
    def phone_number_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    @field_validator('payment_object_id')
    def payment_object_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PickWTPaymentObjectBroadcastExcludeKeyofWTPaymentObjectBroadcastListTypeOrListID from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opt_in_list
        if self.opt_in_list:
            _dict['OptInList'] = self.opt_in_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of imported_list
        if self.imported_list:
            _dict['ImportedList'] = self.imported_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of broadcast_status
        if self.broadcast_status:
            _dict['broadcastStatus'] = self.broadcast_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_object_prefix
        if self.payment_object_prefix:
            _dict['paymentObjectPrefix'] = self.payment_object_prefix.to_dict()
        # set to None if broadcast_queued_at (nullable) is None
        # and model_fields_set contains the field
        if self.broadcast_queued_at is None and "broadcast_queued_at" in self.model_fields_set:
            _dict['broadcastQueuedAt'] = None

        # set to None if broadcast_started_at (nullable) is None
        # and model_fields_set contains the field
        if self.broadcast_started_at is None and "broadcast_started_at" in self.model_fields_set:
            _dict['broadcastStartedAt'] = None

        # set to None if broadcast_completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.broadcast_completed_at is None and "broadcast_completed_at" in self.model_fields_set:
            _dict['broadcastCompletedAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PickWTPaymentObjectBroadcastExcludeKeyofWTPaymentObjectBroadcastListTypeOrListID from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": WTWalletPageViewId.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "employeeID": obj.get("employeeID"),
            "merchantID": obj.get("merchantID"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "isActive": obj.get("isActive"),
            "phoneNumberID": obj.get("phoneNumberID"),
            "mediaURLs": obj.get("mediaURLs"),
            "OptInList": WTOptInList.from_dict(obj["OptInList"]) if obj.get("OptInList") is not None else None,
            "ImportedList": WTImportedList.from_dict(obj["ImportedList"]) if obj.get("ImportedList") is not None else None,
            "broadcastStatus": PickWTPaymentObjectBroadcastExcludeKeyofWTPaymentObjectBroadcastListTypeOrListIDBroadcastStatus.from_dict(obj["broadcastStatus"]) if obj.get("broadcastStatus") is not None else None,
            "broadcastQueuedAt": obj.get("broadcastQueuedAt"),
            "broadcastStartedAt": obj.get("broadcastStartedAt"),
            "broadcastCompletedAt": obj.get("broadcastCompletedAt"),
            "paymentObjectPrefix": PickWTPaymentObjectBroadcastExcludeKeyofWTPaymentObjectBroadcastListTypeOrListIDPaymentObjectPrefix.from_dict(obj["paymentObjectPrefix"]) if obj.get("paymentObjectPrefix") is not None else None,
            "paymentObjectID": obj.get("paymentObjectID"),
            "messageTemplate": obj.get("messageTemplate"),
            "broadcastScheduledAt": obj.get("broadcastScheduledAt")
        })
        return _obj


