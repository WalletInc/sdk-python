# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from wallet.models.message_direction import MessageDirection
from wallet.models.message_status import MessageStatus
from typing import Optional, Set
from typing_extensions import Self

class WTMessageInstance(BaseModel):
    """
    tsoaModel
    """ # noqa: E501
    subresource_uris: Dict[str, Any] = Field(description="Construct a type with a set of properties K of type T", alias="subresourceUris")
    api_version: StrictStr = Field(alias="apiVersion")
    price_unit: StrictStr = Field(alias="priceUnit")
    error_code: Union[StrictFloat, StrictInt] = Field(alias="errorCode")
    date_created: datetime = Field(alias="dateCreated")
    date_sent: datetime = Field(alias="dateSent")
    sid: StrictStr
    messaging_service_sid: StrictStr = Field(alias="messagingServiceSid")
    status: MessageStatus
    num_media: StrictStr = Field(alias="numMedia")
    account_sid: StrictStr = Field(alias="accountSid")
    uri: StrictStr
    error_message: StrictStr = Field(alias="errorMessage")
    price: StrictStr
    date_updated: datetime = Field(alias="dateUpdated")
    to: StrictStr
    var_from: StrictStr = Field(alias="from")
    direction: MessageDirection
    num_segments: StrictStr = Field(alias="numSegments")
    body: StrictStr
    __properties: ClassVar[List[str]] = ["subresourceUris", "apiVersion", "priceUnit", "errorCode", "dateCreated", "dateSent", "sid", "messagingServiceSid", "status", "numMedia", "accountSid", "uri", "errorMessage", "price", "dateUpdated", "to", "from", "direction", "numSegments", "body"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WTMessageInstance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of direction
        if self.direction:
            _dict['direction'] = self.direction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WTMessageInstance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "subresourceUris": obj.get("subresourceUris"),
            "apiVersion": obj.get("apiVersion"),
            "priceUnit": obj.get("priceUnit"),
            "errorCode": obj.get("errorCode"),
            "dateCreated": obj.get("dateCreated"),
            "dateSent": obj.get("dateSent"),
            "sid": obj.get("sid"),
            "messagingServiceSid": obj.get("messagingServiceSid"),
            "status": MessageStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "numMedia": obj.get("numMedia"),
            "accountSid": obj.get("accountSid"),
            "uri": obj.get("uri"),
            "errorMessage": obj.get("errorMessage"),
            "price": obj.get("price"),
            "dateUpdated": obj.get("dateUpdated"),
            "to": obj.get("to"),
            "from": obj.get("from"),
            "direction": MessageDirection.from_dict(obj["direction"]) if obj.get("direction") is not None else None,
            "numSegments": obj.get("numSegments"),
            "body": obj.get("body")
        })
        return _obj


