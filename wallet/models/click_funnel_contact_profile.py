# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ClickFunnelContactProfile(BaseModel):
    """
    ClickFunnelContactProfile
    """ # noqa: E501
    id: Union[StrictFloat, StrictInt]
    first_name: StrictStr
    last_name: StrictStr
    address: StrictStr
    city: StrictStr
    country: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    zip: StrictStr
    email: StrictStr
    phone: StrictStr
    created_at: datetime
    updated_at: datetime
    unsubscribed_at: Optional[Any] = None
    cf_uvid: StrictStr
    shipping_address: Optional[StrictStr] = None
    shipping_country: Optional[Any] = None
    shipping_city: Optional[Any] = None
    shipping_state: Optional[Any] = None
    shipping_zip: Optional[Any] = None
    vat_number: Optional[Any] = None
    middle_name: Optional[Any] = None
    websites: Optional[Any] = None
    location_general: Optional[Any] = None
    normalized_location: Optional[Any] = None
    deduced_location: Optional[Any] = None
    age: Optional[Any] = None
    gender: Optional[Any] = None
    age_range_lower: Optional[Any] = None
    age_range_upper: Optional[Any] = None
    action_score: Optional[Any] = None
    known_ltv: StrictStr
    tags: List[Any]
    time_zone: Optional[StrictStr] = None
    lists_names: Optional[StrictStr] = None
    globally_unsubscribed: StrictBool
    __properties: ClassVar[List[str]] = ["id", "first_name", "last_name", "address", "city", "country", "state", "zip", "email", "phone", "created_at", "updated_at", "unsubscribed_at", "cf_uvid", "shipping_address", "shipping_country", "shipping_city", "shipping_state", "shipping_zip", "vat_number", "middle_name", "websites", "location_general", "normalized_location", "deduced_location", "age", "gender", "age_range_lower", "age_range_upper", "action_score", "known_ltv", "tags", "time_zone", "lists_names", "globally_unsubscribed"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClickFunnelContactProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if unsubscribed_at (nullable) is None
        # and model_fields_set contains the field
        if self.unsubscribed_at is None and "unsubscribed_at" in self.model_fields_set:
            _dict['unsubscribed_at'] = None

        # set to None if shipping_country (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_country is None and "shipping_country" in self.model_fields_set:
            _dict['shipping_country'] = None

        # set to None if shipping_city (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_city is None and "shipping_city" in self.model_fields_set:
            _dict['shipping_city'] = None

        # set to None if shipping_state (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_state is None and "shipping_state" in self.model_fields_set:
            _dict['shipping_state'] = None

        # set to None if shipping_zip (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_zip is None and "shipping_zip" in self.model_fields_set:
            _dict['shipping_zip'] = None

        # set to None if vat_number (nullable) is None
        # and model_fields_set contains the field
        if self.vat_number is None and "vat_number" in self.model_fields_set:
            _dict['vat_number'] = None

        # set to None if middle_name (nullable) is None
        # and model_fields_set contains the field
        if self.middle_name is None and "middle_name" in self.model_fields_set:
            _dict['middle_name'] = None

        # set to None if websites (nullable) is None
        # and model_fields_set contains the field
        if self.websites is None and "websites" in self.model_fields_set:
            _dict['websites'] = None

        # set to None if location_general (nullable) is None
        # and model_fields_set contains the field
        if self.location_general is None and "location_general" in self.model_fields_set:
            _dict['location_general'] = None

        # set to None if normalized_location (nullable) is None
        # and model_fields_set contains the field
        if self.normalized_location is None and "normalized_location" in self.model_fields_set:
            _dict['normalized_location'] = None

        # set to None if deduced_location (nullable) is None
        # and model_fields_set contains the field
        if self.deduced_location is None and "deduced_location" in self.model_fields_set:
            _dict['deduced_location'] = None

        # set to None if age (nullable) is None
        # and model_fields_set contains the field
        if self.age is None and "age" in self.model_fields_set:
            _dict['age'] = None

        # set to None if gender (nullable) is None
        # and model_fields_set contains the field
        if self.gender is None and "gender" in self.model_fields_set:
            _dict['gender'] = None

        # set to None if age_range_lower (nullable) is None
        # and model_fields_set contains the field
        if self.age_range_lower is None and "age_range_lower" in self.model_fields_set:
            _dict['age_range_lower'] = None

        # set to None if age_range_upper (nullable) is None
        # and model_fields_set contains the field
        if self.age_range_upper is None and "age_range_upper" in self.model_fields_set:
            _dict['age_range_upper'] = None

        # set to None if action_score (nullable) is None
        # and model_fields_set contains the field
        if self.action_score is None and "action_score" in self.model_fields_set:
            _dict['action_score'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['time_zone'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClickFunnelContactProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "address": obj.get("address"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "state": obj.get("state"),
            "zip": obj.get("zip"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "unsubscribed_at": obj.get("unsubscribed_at"),
            "cf_uvid": obj.get("cf_uvid"),
            "shipping_address": obj.get("shipping_address"),
            "shipping_country": obj.get("shipping_country"),
            "shipping_city": obj.get("shipping_city"),
            "shipping_state": obj.get("shipping_state"),
            "shipping_zip": obj.get("shipping_zip"),
            "vat_number": obj.get("vat_number"),
            "middle_name": obj.get("middle_name"),
            "websites": obj.get("websites"),
            "location_general": obj.get("location_general"),
            "normalized_location": obj.get("normalized_location"),
            "deduced_location": obj.get("deduced_location"),
            "age": obj.get("age"),
            "gender": obj.get("gender"),
            "age_range_lower": obj.get("age_range_lower"),
            "age_range_upper": obj.get("age_range_upper"),
            "action_score": obj.get("action_score"),
            "known_ltv": obj.get("known_ltv"),
            "tags": obj.get("tags"),
            "time_zone": obj.get("time_zone"),
            "lists_names": obj.get("lists_names"),
            "globally_unsubscribed": obj.get("globally_unsubscribed")
        })
        return _obj


