# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from wallet.models.wt_wallet_page_view_id import WTWalletPageViewId
from typing import Optional, Set
from typing_extensions import Self

class InboundSMS(BaseModel):
    """
    InboundSMS
    """ # noqa: E501
    id: WTWalletPageViewId
    automated_reply: StrictStr = Field(alias="automatedReply")
    automated_reply_additional_info: StrictStr = Field(alias="automatedReplyAdditionalInfo")
    sms_sid: StrictStr = Field(alias="smsSid")
    sms_message_sid: StrictStr = Field(alias="smsMessageSid")
    sms_status: StrictStr = Field(alias="smsStatus")
    messaging_service_sid: Optional[StrictStr] = Field(default=None, alias="messagingServiceSid")
    account_sid: StrictStr = Field(alias="accountSid")
    message_sid: StrictStr = Field(alias="messageSid")
    body: StrictStr
    num_segments: Annotated[int, Field(strict=True, ge=0)] = Field(alias="numSegments")
    to: StrictStr
    to_city: StrictStr = Field(alias="toCity")
    to_state: StrictStr = Field(alias="toState")
    to_zip: StrictStr = Field(alias="toZip")
    to_country: StrictStr = Field(alias="toCountry")
    var_from: StrictStr = Field(alias="from")
    from_city: StrictStr = Field(alias="fromCity")
    from_state: StrictStr = Field(alias="fromState")
    from_zip: StrictStr = Field(alias="fromZip")
    from_country: StrictStr = Field(alias="fromCountry")
    media_urls: Optional[List[StrictStr]] = Field(default=None, alias="mediaURLs")
    watson_intent: Optional[StrictStr] = Field(default=None, alias="watsonIntent")
    watson_intents: Optional[StrictStr] = Field(default=None, alias="watsonIntents")
    watson_context: Optional[StrictStr] = Field(default=None, alias="watsonContext")
    watson_contexts: Optional[StrictStr] = Field(default=None, alias="watsonContexts")
    num_media: Annotated[int, Field(strict=True, ge=0)] = Field(alias="numMedia")
    api_version: StrictStr = Field(alias="apiVersion")
    is_opt_in: Optional[StrictBool] = Field(default=None, alias="isOptIn")
    is_help_desk_request: Optional[StrictBool] = Field(default=None, alias="isHelpDeskRequest")
    merchant_id: Annotated[str, Field(min_length=10, strict=True, max_length=10)] = Field(alias="merchantID")
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    is_active: StrictBool = Field(alias="isActive")
    body_lowercase: StrictStr = Field(alias="bodyLowercase")
    from_localized: StrictStr = Field(alias="fromLocalized")
    __properties: ClassVar[List[str]] = ["id", "automatedReply", "automatedReplyAdditionalInfo", "smsSid", "smsMessageSid", "smsStatus", "messagingServiceSid", "accountSid", "messageSid", "body", "numSegments", "to", "toCity", "toState", "toZip", "toCountry", "from", "fromCity", "fromState", "fromZip", "fromCountry", "mediaURLs", "watsonIntent", "watsonIntents", "watsonContext", "watsonContexts", "numMedia", "apiVersion", "isOptIn", "isHelpDeskRequest", "merchantID", "createdAt", "updatedAt", "isActive", "bodyLowercase", "fromLocalized"]

    @field_validator('merchant_id')
    def merchant_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9]+$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InboundSMS from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InboundSMS from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": WTWalletPageViewId.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "automatedReply": obj.get("automatedReply"),
            "automatedReplyAdditionalInfo": obj.get("automatedReplyAdditionalInfo"),
            "smsSid": obj.get("smsSid"),
            "smsMessageSid": obj.get("smsMessageSid"),
            "smsStatus": obj.get("smsStatus"),
            "messagingServiceSid": obj.get("messagingServiceSid"),
            "accountSid": obj.get("accountSid"),
            "messageSid": obj.get("messageSid"),
            "body": obj.get("body"),
            "numSegments": obj.get("numSegments"),
            "to": obj.get("to"),
            "toCity": obj.get("toCity"),
            "toState": obj.get("toState"),
            "toZip": obj.get("toZip"),
            "toCountry": obj.get("toCountry"),
            "from": obj.get("from"),
            "fromCity": obj.get("fromCity"),
            "fromState": obj.get("fromState"),
            "fromZip": obj.get("fromZip"),
            "fromCountry": obj.get("fromCountry"),
            "mediaURLs": obj.get("mediaURLs"),
            "watsonIntent": obj.get("watsonIntent"),
            "watsonIntents": obj.get("watsonIntents"),
            "watsonContext": obj.get("watsonContext"),
            "watsonContexts": obj.get("watsonContexts"),
            "numMedia": obj.get("numMedia"),
            "apiVersion": obj.get("apiVersion"),
            "isOptIn": obj.get("isOptIn"),
            "isHelpDeskRequest": obj.get("isHelpDeskRequest"),
            "merchantID": obj.get("merchantID"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "isActive": obj.get("isActive"),
            "bodyLowercase": obj.get("bodyLowercase"),
            "fromLocalized": obj.get("fromLocalized")
        })
        return _obj


