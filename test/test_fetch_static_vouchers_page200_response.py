# coding: utf-8

"""
    wallet-api

    API

    The version of the OpenAPI document: 2.1.600
    Contact: development@wallet.inc
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from wallet.models.fetch_static_vouchers_page200_response import FetchStaticVouchersPage200Response

class TestFetchStaticVouchersPage200Response(unittest.TestCase):
    """FetchStaticVouchersPage200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FetchStaticVouchersPage200Response:
        """Test FetchStaticVouchersPage200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FetchStaticVouchersPage200Response`
        """
        model = FetchStaticVouchersPage200Response()
        if include_optional:
            return FetchStaticVouchersPage200Response(
                data = [
                    wallet.models.wt_static_voucher.WTStaticVoucher(
                        id = jdu37eua98, 
                        campaign_id = 'C0123456789', 
                        member_id = 'MEM1001', 
                        cell_phone_number = '+18054052344', 
                        offer_amount_cents = 5400, 
                        order_number = 20, 
                        transaction_type = redemption, 
                        register_id = jdu74hsy, 
                        redeemed_source = 'AN-47', 
                        redeemed_transaction_id = 'Jqkaurn28170dh1fh', 
                        redeemed_amount = 540, 
                        is_redeemed = False, 
                        refunded_transaction_id = 'Jqkaurn28170dh1fh', 
                        refunded_amount = 540, 
                        status = null, 
                        customer_id = 'CUST-1001', 
                        authorized_against_check_number = '82jSUWKFLjgaj827', 
                        authorized_amount = 520, 
                        merchant_id = 'C0123456789', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        is_active = True, 
                        authorized_amount_decimal = '12.52', 
                        authorized_amount_string = '$12.52', 
                        offer_amount_cents_decimal = '12.52', 
                        offer_amount_cents_string = '$12.52', 
                        redeemed_amount_decimal = '12.52', 
                        redeemed_amount_string = '$12.52', 
                        date_time_redeemed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        date_time_refunded = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        date_time_last_viewed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        reason_invalid = 'Voucher already redeemed.', )
                    ],
                total_rows = 1.337
            )
        else:
            return FetchStaticVouchersPage200Response(
                data = [
                    wallet.models.wt_static_voucher.WTStaticVoucher(
                        id = jdu37eua98, 
                        campaign_id = 'C0123456789', 
                        member_id = 'MEM1001', 
                        cell_phone_number = '+18054052344', 
                        offer_amount_cents = 5400, 
                        order_number = 20, 
                        transaction_type = redemption, 
                        register_id = jdu74hsy, 
                        redeemed_source = 'AN-47', 
                        redeemed_transaction_id = 'Jqkaurn28170dh1fh', 
                        redeemed_amount = 540, 
                        is_redeemed = False, 
                        refunded_transaction_id = 'Jqkaurn28170dh1fh', 
                        refunded_amount = 540, 
                        status = null, 
                        customer_id = 'CUST-1001', 
                        authorized_against_check_number = '82jSUWKFLjgaj827', 
                        authorized_amount = 520, 
                        merchant_id = 'C0123456789', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        is_active = True, 
                        authorized_amount_decimal = '12.52', 
                        authorized_amount_string = '$12.52', 
                        offer_amount_cents_decimal = '12.52', 
                        offer_amount_cents_string = '$12.52', 
                        redeemed_amount_decimal = '12.52', 
                        redeemed_amount_string = '$12.52', 
                        date_time_redeemed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        date_time_refunded = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        date_time_last_viewed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        reason_invalid = 'Voucher already redeemed.', )
                    ],
                total_rows = 1.337,
        )
        """

    def testFetchStaticVouchersPage200Response(self):
        """Test FetchStaticVouchersPage200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
